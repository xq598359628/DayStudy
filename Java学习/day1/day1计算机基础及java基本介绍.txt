Java基础第一章

	1计算机硬件和软件的概念。
		硬件：计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。
			  按照冯诺依曼体系，分为运算器、控制器、存储器、输入设备和输出设备等五个逻辑部件组成。
			  通常把控制器与运算器合称为中央处理器（Central Processing Unit，CPU）。
			  
		软件：一系列按照特定顺序组织的计算机数据和指令的集合。分为系统软件和应用软件。
			  系统软件：负责管理计算机系统中各种独立的硬件，使得他们可以协调工作。常见的有Windows、Linux、MacOS等。
			  应用软件：为了某种特定的用途而被开发的软件。常见的有WPS、Office、QQ等。
	
	2计算机语言的分类。
		
		机器语言：用二进制代码表示的计算机能直接识别和执行的一种机器指令的集合。电子计算机所使用的是由"0"和"1"组成的二进制数，二进制是计算机的语言的基础。
		汇编语言：为了减轻使用机器语言编程的痛苦，人们进行了一种有益的改进：用一些简洁的英文字母、符号串来替代一个特定的指令的二进制串，比如，用"ADD"代表加法，"MOV"代表数据传递等等，这样一来，人们很容易读懂并理解程序在干什么，纠错及维护都变得方便了，这种程序设计语言就称为汇编语言。但仍然是面向机器的语言,使用起来还是比较繁琐费时,通用性也差。汇编语言是低级语言。
		
		高级语言：与自然语言相近并为计算机所接受和执行的计算机语言称高级语言，是面向用户的语言。
		
	3常见的DOS命名
		e：切换盘符  dir 列出目录 cd .. 进入下一级目录 cd / 回到根目录 md 创建目录  rd 删除目录
		
	4java语言的发展简史
		Java是由Sun Microsystems公司于1995年5月推出，由James Gosling和同事们共同研发。
		98年发布了历史上最重要的JDK版本:JDK1.2.并将Java分为J2EE,J2SE,J2ME.
		04年发布JDK1.5,并改名为Java SE5.0，Java EE ,JAVA ME.
		09年Oracle收购。
		
	5高级语言的运行机制。
		
		编译型语言：使用专门的编译器，针对特地平台（操作系统）将某种高级语言源代码一次性翻译成可悲该平台硬件执行的机器码并包装成该平台所能识别的可执行程序的格式，这个转换过程叫做编译。
		编译生成的可执行程序可以脱离开发环境，在特定平台独立运行。运行效率高，但不能跨平台。C C++ Objective-C
		
		解释型语言：使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行的语言。运行效率较低，而且不能脱离解释器独立运行，但容易跨平台。
	
	6Java语言的运行机制
	
		Java源程序先经过编译，但不是生成特定平台的机器码，而是生成一种与平台无关的字节码文件。再由JVM解释执行。
		Java编译器编译生成的Class文件，不面向任何具体的平台，只面向JVM。不同平台的JVM都是不同的，但他们都提供了相同的编程接口。因此JVM是Java程序跨平台的关键部分。
	
	7JVM,JDK,JRE的区别
		
		JDK（Java Development Kit）简单理解就是Java开发工具包，是SUN提供的已套用于开发程序的开发包。包括Java编译器，JRE,常用Java类库。
		JRE(Java Runtime Enviroment)是Java的运行时环境，含JVM标准实现及Java核心类库。
		JVM( java virtual machine)也就是常常听到Java虚拟机。它是整个java实现跨平台的最核心的部分。
		JDK包含JRE，而JRE包含JVM，总的来说JDK是用于java程序的开发,而jre则是只能运行class而没有编译的功能，Eclipse、IntelliJ IDEA等其他IDE有自己的编译器而不是用JDK bin目录中自带的，所以在安装时只需选中jre路径就ok了
		
	8设置PATH环境变量
		
		windows操作系统要根据Path环境变量来查找命令。Linux熊根据PATH环境变量来查找命令。
		无论是Windows还是Linux，只要Java和javac两个命令的路径添加到PATH环境变量中，可以编译运行java程序了。
		
	9CLASSPATH环境变量
		
		当使用"Java Java类名”命令来运行Java程序，JRE要依靠CLASSPATH环境变量来搜索Java类。在JDK1.5以前，JRE不会默认在当前路径下搜索Java类。所以JDK1.5以后就不用配置了。
		
	10Java源文件的命名规则

		Java源文件后缀必须是.java.
		通常情况下，命名是随意的。但有一种情况，如果源文件定义了一个Public类，源文件名字必须保持一致。因为Java源文件中只能由一个Public类。
		
	11垃圾回收机制
	
		传统的C/C++语言，需要程序员手动回收内存。这种显示进行垃圾回收主要有如下两个缺点。
			-> 程序忘记及时回收无用内存，从而导致内存泄漏，降低系统性能。
			-> 程序错误地回收程序核心类库的内存，从而导致系统崩溃。
			
		Java的内存分配和回收都是由JRE在后台进行自动进行，这种机制称为垃圾回收。通常JRE会提供一个后台线程来进行检测和控制，一般都是在CPU空闲或内存不足时自动进行垃圾回收，
		程序员无法精确控制垃圾回收的时间和顺序等。
		优点：
			-> 提高编程效率。
			-> 保护程序的完整性，垃圾回收是Java语言安全性策略的一个重要组成部分。
			
		特点：
			-> 垃圾回收机制的工作目标是回收无用对像的内存空间。对其他的物理资源如数据库连接，磁盘IO无法回收。
			-> 为了更好地让垃圾回收机制回收不再使用的对象，可以将对用置为Null。
			-> 垃圾回收具有不可预知性。不同的JVM采用了不同的垃圾回收机制和不同的垃圾回收算法，因此它有可能是定时发生，也有可能是当CPU空闲发生，也有可能是内存不存时。
			   虽然程序员可以通过调用Rumtime的gc()或System.gc()等方法来建议系统进行垃圾回收，但调用只是建议。
			   
			   
			
		
		